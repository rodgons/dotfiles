# add local binaries to PATH
PATH=$HOME/.local/bin:$PATH

# set nvim as the default editor
export EDITOR=nvim

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

# golang
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# pnpm global
export PNPM_HOME="$HOME/Library/pnpm"
if [[ ":$PATH:" != *":$PNPM_HOME:"* ]]; then
    export PATH="$PNPM_HOME:$PATH"
fi

# oh-my-zsh
export ZSH="$HOME/.oh-my-zsh"

# brew sqlite
export PATH="/opt/homebrew/opt/sqlite/bin:$PATH"

################################################################################

# functions

# golang test with colors
function go_test() {
    go test "$@" | sed -E 's/(PASS|SKIP|FAIL)/\033[32m\1\033[0m/g' | GREP_COLOR='1;33' egrep --color=always '[a-zA-Z0-9\-_.]+[:][0-9]+[:]|^'
}

# kill port
function kill_port() {
    local pid
    pid=$(lsof -t -i tcp:"$1" || true)
    if [ -z "$pid" ]; then
        echo "No process found on port $1."
        return
    fi
    echo "Found process $pid, killing..."
    kill -s INT "$pid" || echo "Failed to kill process on port $1."
}

# show local or public ip
function show_ip() {
    local interface=global
    while [[ $# -gt 0 ]]; do
        case $1 in
        -l | --local)
            interface=local
            ;;
        esac
        shift
    done
    if [[ $interface == "local" ]]; then
        ifconfig | grep -Eo 'inet (addr:)?([0-9]+\.){3}[0-9]+' | grep -v '127.0.0.1' | head -n1
    else
        curl -s ifconfig.co
    fi
}

# Function to convert a string to Pascal Case
to_pascal_case() {
    echo "$1" | awk -F' ' '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) tolower(substr($i,2)) }}1' OFS=''
}

# .net project generator
function gen_dotnet() {
    # Check if a name is provided
    if [ -z "$1" ]; then
        echo "Please provide a project name."
        return 1
    fi

    # Project name
    local project_name=$1
    project_name=$(to_pascal_case "$1")

    # Create a folder with the project name
    mkdir $project_name
    cd $project_name

    # Create the src folder
    mkdir src

    # Create a solution file
    dotnet new sln

    # Create a class library project inside src called NAME.Core
    dotnet new classlib -o src/$project_name.Core

    # Create the API library
    dotnet new web -o src/$project_name.Api
    dotnet add src/$project_name.Api reference src/$project_name.Core

    # Create global.json, .gitignore, and editorconfig files
    dotnet new globaljson
    dotnet new gitignore
    dotnet new editorconfig

    # Add all projects to the solution
    dotnet sln add **/**.csproj

    echo "Project $project_name created successfully."
}