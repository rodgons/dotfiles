---
- name: Configure host.
  hosts: all

  vars:
    nerd_fonts_version: "v3.1.1"

  tasks:
    - name: Run softwareupdate command
      command: softwareupdate --install-rosetta --agree-to-license
      changed_when: false
    
    - name: Install colorls gem
      gem:
        name: colorls
        state: present

    - name: Check if Nerd Fonts are installed
      stat:
        path: "{{ lookup('env', 'HOME') }}/Library/Fonts/JetBrainsMonoNLNerdFont-Bold.ttf"
      register: nerd_fonts_installed
      failed_when: false

    - name: Download Nerd Fonts
      get_url:
        url: "https://github.com/ryanoasis/nerd-fonts/releases/download/{{ nerd_fonts_version }}/JetBrainsMono.zip"
        dest: "/tmp/nerd-fonts.zip"
      when: not nerd_fonts_installed.stat.exists

    - name: Create fonts directory
      file:
        path: "/tmp/fonts"
        state: directory
      when: not nerd_fonts_installed.stat.exists

    - name: Unzip Nerd Fonts
      unarchive:
        src: "/tmp/nerd-fonts.zip"
        dest: "/tmp/fonts"
      when: not nerd_fonts_installed.stat.exists

    - name: Install Nerd Fonts
      copy:
        src: "{{ item }}"
        dest: "{{ lookup('env', 'HOME') }}/Library/Fonts/{{ item | basename }}"
      loop: "{{ lookup('pipe', 'find /tmp/fonts -type f -name \"*.ttf\"').split('\n') }}"
      changed_when: true
      when: not nerd_fonts_installed.stat.exists

    - name: Download Oh My Zsh installation script
      get_url:
        url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        dest: /tmp/install_ohmyzsh.sh

    - name: Run Oh My Zsh installation script
      command: sh /tmp/install_ohmyzsh.sh --unattended
      register: ohmyzsh_result
      failed_when: "'FAILED' in ohmyzsh_result.stderr"

    - name: Check if Homebrew is installed
      stat:
        path: "/opt/homebrew/bin/brew"
      register: brew_check
      failed_when: false
      ignore_errors: true

    - name: Install Homebrew if not installed
      command: "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
      when: not brew_check.stat.exists

    - name: Install Homebrew packages
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ lookup('file', '~/.local/share/chezmoi/dot_bootstrap/brew_packages').split('\n') }}"
      when: brew_check.stat.exists

    - name: Install Homebrew casks
      community.general.homebrew_cask:
        name: "{{ item }}"
        state: present
      loop: "{{ lookup('file', '~/.local/share/chezmoi/dot_bootstrap/brew_cask_packages').split('\n') }}"
      when: brew_check.stat.exists

    - name: Ensure Bitwarden CLI is installed
      block:
        - name: Check if Bitwarden CLI is installed
          command: "bw --version"
          register: bw_check
          changed_when: false
          failed_when: false
          ignore_errors: true
        - name: Fail if Bitwarden CLI is not installed
          fail:
            msg: "Bitwarden CLI is required but not found. Please install it by running: brew install bitwarden-cli"
          when: bw_check.rc != 0

    - name: Starting Secrets sync
      shell: |
        printf '\033[0;32mStarting Secrets sync\033[0m\n'
        if [ -z "${BW_SESSION-}" ]; then
          export BW_SESSION=$(bw unlock --raw)
        fi

    - name: Sync Bitwarden Vault
      command: "bw sync"

    - name: Get item attachedSecrets
      command: "bw get item attachedSecrets"
      register: attached_secrets
      changed_when: false

    - name: Create .ssh directory if it doesn't exist
      file:
        path: "~/.ssh"
        state: directory
      when: not attached_secrets.rc

    - name: Loop over attachments and download them
      shell: |
        for attachment in $(echo "{{ attached_secrets.stdout | from_json | json_query('attachments[*].id') }}"); do
          attachment_name=$(bw get attachment $attachment --itemid {{ attached_secrets.stdout | from_json | json_query('id') }} --output - | jq -r '.fileName')
          bw get attachment $attachment --itemid {{ attached_secrets.stdout | from_json | json_query('id') }} --output "~/.ssh/$attachment_name"
        done
      when: not attached_secrets.rc
